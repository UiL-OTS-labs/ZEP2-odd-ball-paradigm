/******************************************************************************\
FILE:           task.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Auditory Lexical Decision


Global structure of this experiment phase:

  - instructions

  - practice part
      trial

  - pause

  - test part
      trial


HISTORY:
2011-10-25 TV   Created.
2017-01-09 TV   Adapted for Zep 2.0.

\******************************************************************************/

//requires 2.4;

import defs;
import stimuli;
import output;
import test_page;


Block task
{
    Part instructions
    {
        on_event:entry()
        {
//            pause_page.set_text_size(1000, 600);
            pause_page.set_text(
                "<b>Dear participant,</b>\n"
                "\n"
                "Thank you for participating in this experiment.\n"
                "\n"
                "You are now going to hear words over the headphones, one "
                "after the other. Your task is to indicate for each word as "
                "quickly as possible whether you think the word is <i>a real "
                "word or not</i>. Try to make no mistakes.\n"
                "\n"

                "To respond, hit the left button on the button-box for "
                "<i>No</i> and the right button for <i>Yes</i>.\n"

//                "To respond, hit the left shift key for <i>No</i> and the "
//                "right shift key for <i>Yes</i>.\n"

//                "To respond, hit the left button on the button-box for "
//                "<i>No</i> and the right button for <i>Yes</i>. "
//                "Alternatively you can use the left or right shift keys.\n"

                "\n"
                "First we will do a short practice.\n"
                "\n"
//                "<i>Hit Enter when ready to start.</i>",
                "<i>Hit any button on the button-box when ready to start.</i>",
                true);

            pause_page.action(this);
            control.enable_all_buttons();
        }
    }


    Block practice
    {
        TestItem[]        item_block;   // current items


        on_event:entry()
        {
            prepare_prac_items();
            num_cycles = prac_items.size;
            // Prepare test page: progress bar, feedback and prompt enabled.
            test_page.setup(num_cycles, false, false);
        }


        on_event:exit()
        {
            test_page.cleanup();
        }

        Block practice_tones
        {
            TestItem item;

            on_event:entry()
            {
                item_block = prac_items[practice.cycle];
                num_cycles = item_block.size;
            }

            Trial trial
            {
                on_event:entry()
                {
                    item = prac_items[practice.cycle][practice_tones.cycle];

                    test_page.action(this, item, reference_time, practice.cycle);
                }
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }


    Part pause
    {
        on_event:entry()
        {
            pause_page.set_text(
                "End of the practice part.\n"
                "\n"
                "If you have any questions at this moment please ask the "
                "experimenter now.\n"
                "\n"
//                "<i>Hit Enter when ready to proceed.</i>",
                "<i>Hit any button on the button-box when ready to "
                "proceed.</i>",
                true);

            pause_page.action(this);
            control.enable_all_buttons();
        }
    }


//    Block test
//    {
//        TestItem[]        items;   // current item
//
//
//        on_event:entry()
//        {
//            num_cycles = test_items.size;
////            num_cycles = 3;
//
//            // Prepare test page: progress bar enabled, feedback and prompt
//            // disabled.
//            test_page.setup(num_cycles, false, false);
//        }
//
//
//        on_event:exit()
//        {
//            test_page.cleanup();
//
//            save_trial_data();
//        }
//
//
//        Trial trial
//        {
//            on_event:entry()
//            {
//                item = test_items[test.cycle];
//
//                test_page.action(this, item, reference_time, test.cycle);
//            }
//
//
//            on_event:exit()
//            {
//                // Add new row to test output table.
//                TestOutput output;
//                output.trialnum = test.cycle + 1;
//                output.id = item.id;
//                output.type = item.type;
//                output.wordfn = item.wordfn;
//                output.value = test_page.response.value;
//                output.rt = test_page.response.rt;
//                output.correct = test_page.response.correct;
//                test_output_append(output);
//            }
//        }
//    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }
}


void action(Part caller)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled.
    task.enter(caller);
}

